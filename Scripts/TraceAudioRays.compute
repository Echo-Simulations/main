#pragma kernel CSMain

RWTexture2DArray<float> Result;
//Red channel represents volume (as a percent)
//Green channel represents delay (up to 1 second)

float4x4 _Source;

float2 _PixelOffset;

static const float PI = 3.14159265f;
static const float EPSILON = 1e-8;
static const float PHI = PI * (3.0f - 2.23606798f);

//- CONTROLS
int _Bounces;
int _Diffractions;

//-------------------------------------
//- RANDOMNESS

float2 _Pixel;

//-------------------------------------
//- MESHES

struct MeshObject
{
	float4x4 localToWorldMatrix;
	int indices_offset;
	int indices_count;
    int isSoundSource;
};

StructuredBuffer<MeshObject> _MeshObjects;
StructuredBuffer<float3> _Vertices;
StructuredBuffer<int> _Indices;


//-------------------------------------
//- RAY

struct Ray
{
    float3 origin;
    float3 direction;
    float volume;
    float delay;
};

Ray CreateRay(float3 origin, float3 direction)
{
    Ray ray;
    ray.origin = origin;
    ray.direction = direction;
    ray.volume = 1.0f;
    ray.delay = 0.0f;
    return ray;
}

//Fibonnachi Sphere Algorithm
Ray CreateSphereRay(float2 uv, int count)
{
    float3 origin = mul(_Source, float4(0.0f, 0.0f, 0.0f, 1.0f)).xyz;

    //x or y?
    float radius = sqrt(1.0f-(uv*uv).y);
    float3 direction;
    float theta = PHI * count;

    direction.x = cos(theta) * radius;
    direction.y = uv.y;
    direction.z = sin(theta) * radius;

    direction = normalize(direction);

    return CreateRay(origin, direction);
}


//-------------------------------------
//- RAYHIT

struct RayHit
{
    float3 position;
    float distance; //Assumes measured in meters
    float3 normal;
    uint index; //Represents the index in the index buffer where the polygon is described

    float reflection; //How much sound will be reflected vs absorbed
    bool hitSoundSource;
};

RayHit CreateRayHit()
{
    RayHit hit;
    hit.position = float3(0.0f, 0.0f, 0.0f);
    hit.distance = 1.#INF;
    hit.normal = float3(0.0f, 0.0f, 0.0f);
    hit.index = 0;

    hit.reflection = 0.0f;
    hit.hitSoundSource = 0;
    return hit;
}


//-------------------------------------
//- INTERSECTION

bool IntersectTriangle_MT97(Ray ray, float3 vert0, float3 vert1, float3 vert2,
	inout float t, inout float u, inout float v)
{
	// find vectors for two edges sharing vert0
	float3 edge1 = vert1 - vert0;
	float3 edge2 = vert2 - vert0;

	// begin calculating determinant - also used to calculate U parameter
	float3 pvec = cross(ray.direction, edge2);

	// if determinant is near zero, ray lies in plane of triangle
	float det = dot(edge1, pvec);

	// use backface culling
	if (det < EPSILON)
		return false;
	float inv_det = 1.0f / det;

	// calculate distance from vert0 to ray origin
	float3 tvec = ray.origin - vert0;

	// calculate U parameter and test bounds
	u = dot(tvec, pvec) * inv_det;
	if (u < 0.0 || u > 1.0f)
		return false;

	// prepare to test V parameter
	float3 qvec = cross(tvec, edge1);

	// calculate V parameter and test bounds
	v = dot(ray.direction, qvec) * inv_det;
	if (v < 0.0 || u + v > 1.0f)
		return false;

	// calculate t, ray intersects triangle
	t = dot(edge2, qvec) * inv_det;

	return true;
}

void IntersectMeshObject(Ray ray, inout RayHit bestHit, MeshObject meshObject)
{
	uint offset = meshObject.indices_offset;
	uint count = offset + meshObject.indices_count;
	for (uint i = offset; i < count; i += 3)
	{
        //Find the set of vertices that compose the tri
		float3 v0 = (mul(meshObject.localToWorldMatrix, float4(_Vertices[_Indices[i]], 1))).xyz;
		float3 v1 = (mul(meshObject.localToWorldMatrix, float4(_Vertices[_Indices[i + 1]], 1))).xyz;
		float3 v2 = (mul(meshObject.localToWorldMatrix, float4(_Vertices[_Indices[i + 2]], 1))).xyz;

		float t, u, v;
		if (IntersectTriangle_MT97(ray, v0, v1, v2, t, u, v))
		{
			if (t > 0 && t < bestHit.distance)
			{
                bestHit.hitSoundSource = meshObject.isSoundSource;
				bestHit.distance = t;
				bestHit.position = ray.origin + t * ray.direction;
				bestHit.normal = normalize(cross(v1 - v0, v2 - v0));
                bestHit.index = i;
                //Determine the properties of the collision
                bestHit.reflection = 1.0f;
			}
		}
	}
}

void CheckDiffraction(Ray ray, inout Ray diffracted_ray, RayHit collision, MeshObject meshObject)
{
    uint offset = meshObject.indices_offset;
    uint count = offset + meshObject.indices_count;
    for (uint i = offset; i < count; i += 3)
    {
        //Check for polys that share 2 vertices
        int shared_vertices = 0;
        if (_Indices[collision.index] == _Indices[i] || _Indices[collision.index] == _Indices[i + 1] || _Indices[collision.index] == _Indices[i + 2]) {
            shared_vertices++;
        }
        if (_Indices[collision.index + 1] == _Indices[i] || _Indices[collision.index + 1] == _Indices[i + 1] || _Indices[collision.index + 1] == _Indices[i + 2]) {
            shared_vertices++;
        }
        if (_Indices[collision.index + 2] == _Indices[i] || _Indices[collision.index + 2] == _Indices[i + 1] || _Indices[collision.index + 2] == _Indices[i + 2]) {
            shared_vertices++;
        }
            
        if(shared_vertices == 2)
        {
            float3 v0 = (mul(meshObject.localToWorldMatrix, float4(_Vertices[_Indices[i]], 1))).xyz;
            float3 v1 = (mul(meshObject.localToWorldMatrix, float4(_Vertices[_Indices[i + 1]], 1))).xyz;
            float3 v2 = (mul(meshObject.localToWorldMatrix, float4(_Vertices[_Indices[i + 2]], 1))).xyz;

            //Compare normals
            if (abs(acos(dot(normalize(cross(v1 - v0, v2 - v0)), normalize(ray.direction)))) < PI/2)
            {
                    //Diffraction is possible
            }
        }
    }
}

//-------------------------------------
//- TRACE

RayHit Trace(Ray ray)
{
	RayHit bestHit = CreateRayHit();
    Ray diffracted_ray = CreateRay(float3(0.0f, 0.0f, 0.0f), float3(0.0f, 0.0f, 0.0f));
	uint count, stride, i;

	// Trace mesh objects
	_MeshObjects.GetDimensions(count, stride);
	for (i = 0; i < count; i++)
	{
		IntersectMeshObject(ray, bestHit, _MeshObjects[i]);
	}
    // Check if diffraction can occur
    for (i = 0; i < count; i++) {
        MeshObject obj = _MeshObjects[i];
        //Only check the same mesh as the hit object
        if (obj.indices_offset <= bestHit.index && obj.indices_offset + obj.indices_count > bestHit.index) {
            //Check if there is a possible diffraction
            CheckDiffraction(ray, diffracted_ray, bestHit, obj);
        }
    }

	return bestHit;
}


//-------------------------------------
//- CALCULATE

void CalculateEffects(inout Ray ray, RayHit hit)
{
    if (hit.distance < 1.#INF)
    {
        // Specular reflection
        ray.origin = hit.position + hit.normal * 0.001f;
        ray.direction = reflect(ray.direction, hit.normal);
        //Distance falloff
        //Currently rather extreme
        if(hit.distance > 1.0f)
            ray.volume *= 1 / (hit.distance * hit.distance);
        //Absorption on impact
        ray.volume *= hit.reflection;
        //Delay
        ray.delay += hit.distance / 343.0f;
    }
    else
    {
        // Skybox, erase the ray
        ray.volume = 0.0f;
        ray.delay = 0.0f;
    }
}

//-------------------------------------
//- KERNEL

[numthreads(8,8,8)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
    //_Pixel = id.xy;

    // Get the dimensions of the RenderTexture
    uint width, height, depth;
    Result.GetDimensions(width, height, depth);

    // Transform pixel to [-1,1] range
    float2 uv = float2((id.xy + _PixelOffset) / float2(width, height) * 2.0f - 1.0f);

    // Fire a ray in a uniform direction from the source
    Ray ray = CreateSphereRay(uv, (id.x * 8) + id.y);

    // Trace and shade the ray
    RayHit hit;
    //float3 result = float3(0, 0, 0);
    for (int i = 0; i < _Bounces; i++)
    {
        GroupMemoryBarrierWithGroupSync(); //Synchronize threads to ensure proper timing

        hit = Trace(ray);
        CalculateEffects(ray, hit);

        if (ray.volume == 0.0f)
            break;
        if (hit.hitSoundSource)
            break;
    }
    //Kill all data on dead rays
    if (!hit.hitSoundSource)
    {
        ray.volume = 0.0f;
        ray.delay = 0.0f;
    }
    else if (ray.volume == 0.0f)
    {
        ray.delay = 0.0f;
    }
    //Cap the delay at 1.0f
    else if (ray.delay > 1.0f) 
    {
        ray.delay = 1.0f;
    }

    Result[id.xyz] = ray.volume;
}
