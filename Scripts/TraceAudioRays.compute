#pragma kernel CSMain
#pragma only_renderers vulkan

RWTexture2DArray<float> Result;
//Depth is equal to _Diffractions * _ParameterCount

float4x4 _Source;

float2 _PixelOffset;

static const float PI = 3.14159265f;
static const float PI_2 = PI / 2;
static const float EPSILON = 1e-8;
static const float PHI = PI * (3.0f - 2.23606798f);

//- CONTROLS
int _Bounces;
int _Diffractions;
int _ParameterCount = 1;
//Channels are as follows:
// 0: Target Mesh (0 means did not hit)

//-------------------------------------
//- RANDOMNESS

float2 _Pixel;

//-------------------------------------
//- MESHES

struct MeshObject
{
	float4x4 localToWorldMatrix;
	int indices_offset;
	int indices_count;
    int isSoundSource;
    float3 center;
    float3 extents;
};

StructuredBuffer<MeshObject> _MeshObjects;
StructuredBuffer<float3> _Vertices;
StructuredBuffer<int> _Indices;

RWStructuredBuffer<float3> _RayPos;
RWStructuredBuffer<float3> _RayDir;
RWStructuredBuffer<int> _RayEnabled;


//-------------------------------------
//- RAY

struct Ray
{
    float3 origin;
    float3 direction;
    float volume;
    float delay;
};

Ray CreateRay(float3 origin, float3 direction)
{
    Ray ray;
    ray.origin = origin;
    ray.direction = direction;
    ray.volume = 1.0f;
    ray.delay = 0.0f;
    return ray;
}

//Fibonnachi Sphere Algorithm
Ray CreateSphereRay(float2 uv, int count)
{
    float3 origin = mul(_Source, float4(0.0f, 0.0f, 0.0f, 1.0f)).xyz;

    //x or y?
    float radius = sqrt(1.0f-(uv*uv).y);
    float3 direction;
    float theta = PHI * count;

    direction.x = cos(theta) * radius;
    direction.y = uv.y;
    direction.z = sin(theta) * radius;

    direction = normalize(direction);

    return CreateRay(origin, direction);
}


//-------------------------------------
//- RAYHIT

struct RayHit
{
    float3 position;
    float distance; //Assumes measured in meters
    float3 normal;
    int index; //Represents the index in the index buffer where the polygon is described

    float reflection; //How much sound will be reflected vs absorbed
    bool hitSoundSource;
};

RayHit CreateRayHit()
{
    RayHit hit;
    hit.position = float3(0.0f, 0.0f, 0.0f);
    hit.distance = 1.#INF;
    hit.normal = float3(0.0f, 0.0f, 0.0f);
    hit.index = 0;

    hit.reflection = 0.0f;
    hit.hitSoundSource = 0;
    return hit;
}


//-------------------------------------
//- INTERSECTION

bool IntersectTriangle_MT97(Ray ray, float3 vert0, float3 vert1, float3 vert2,
	inout float t, inout float u, inout float v)
{
    bool ret = false;
    //Initializing t is really unnecessary, but avoids a silly warning
    t = 0.0f;

    // find vectors for two edges sharing vert0
    float3 edge1 = vert1 - vert0;
    float3 edge2 = vert2 - vert0;

    // begin calculating determinant - also used to calculate U parameter
    float3 pvec = cross(ray.direction, edge2);

    // if determinant is near zero, ray lies in plane of triangle
    float det = dot(edge1, pvec);

    // use backface culling
    if (det >= EPSILON)
    {
        float inv_det = 1.0f / det;

        // calculate distance from vert0 to ray origin
        float3 tvec = ray.origin - vert0;

        // calculate U parameter and test bounds
        u = dot(tvec, pvec) * inv_det;
        if (u >= 0.0 && u <= 1.0f)
        {
            // prepare to test V parameter
            float3 qvec = cross(tvec, edge1);

            // calculate V parameter and test bounds
            v = dot(ray.direction, qvec) * inv_det;
            if (v >= 0.0 && u + v <= 1.0f)
            {
                // calculate t, ray intersects triangle
                t = dot(edge2, qvec) * inv_det;
                ret = true;
            }
        }
    }

    return ret;
}

void IntersectMeshObject(Ray ray, inout RayHit bestHit, MeshObject meshObject)
{
	uint offset = meshObject.indices_offset;
	uint count = offset + meshObject.indices_count;
	for (uint i = offset; i < count; i += 3)
	{
        //Find the set of vertices that compose the tri
		float3 v0 = (mul(meshObject.localToWorldMatrix, float4(_Vertices[_Indices[i]], 1))).xyz;
		float3 v1 = (mul(meshObject.localToWorldMatrix, float4(_Vertices[_Indices[i + 1]], 1))).xyz;
		float3 v2 = (mul(meshObject.localToWorldMatrix, float4(_Vertices[_Indices[i + 2]], 1))).xyz;

		float t, u, v;
		if (IntersectTriangle_MT97(ray, v0, v1, v2, t, u, v))
		{
			if (t > 0 && t < bestHit.distance)
			{
                bestHit.hitSoundSource = meshObject.isSoundSource;
				bestHit.distance = t;
				bestHit.position = ray.origin + t * ray.direction;
				bestHit.normal = normalize(cross(v1 - v0, v2 - v0));
                bestHit.index = i;
                //Determine the properties of the collision
                bestHit.reflection = 1.0f;
			}
		}
        GroupMemoryBarrierWithGroupSync();
	}
}

bool IntersectBoundingBox(Ray ray, MeshObject meshObject)
{
    //Check all of the faces of the bounding box
    for (uint i = 0; i < 36; i += 3) {

        float3 v0 = _Vertices[_Indices[i]] * meshObject.extents * 2 + meshObject.center;
        v0 = (mul(meshObject.localToWorldMatrix, float4(v0, 1))).xyz;
        float3 v1 = _Vertices[_Indices[i + 1]] * meshObject.extents * 2 + meshObject.center;
        v1 = (mul(meshObject.localToWorldMatrix, float4(v1, 1))).xyz;
        float3 v2 = _Vertices[_Indices[i + 2]] * meshObject.extents * 2 + meshObject.center;
        v2 = (mul(meshObject.localToWorldMatrix, float4(v2, 1))).xyz;

        float t, u, v;
        //Swap two vertices to flip the face's normal
        if (IntersectTriangle_MT97(ray, v0, v2, v1, t, u, v))
        {
            return true;
        }
    }
    return true;
}

void CheckDiffraction(Ray ray, inout Ray diffracted_ray, RayHit collision, MeshObject meshObject, uint group, out bool success)
{
    uint offset = meshObject.indices_offset;
    uint count = offset + meshObject.indices_count;
    bool3 shared_vertices_flags = bool3(false, false, false);
    for (uint i = offset; i < count; i += 3)
    {
        //Check for polys that share 2 vertices
        int shared_vertices = 0;
        if (_Indices[collision.index] == _Indices[i] || _Indices[collision.index] == _Indices[i + 1] || _Indices[collision.index] == _Indices[i + 2]) {
            shared_vertices++;
            shared_vertices_flags.x = true;
        }
        if (_Indices[collision.index + 1] == _Indices[i] || _Indices[collision.index + 1] == _Indices[i + 1] || _Indices[collision.index + 1] == _Indices[i + 2]) {
            shared_vertices++;
            shared_vertices_flags.y = true;
        }
        if (_Indices[collision.index + 2] == _Indices[i] || _Indices[collision.index + 2] == _Indices[i + 1] || _Indices[collision.index + 2] == _Indices[i + 2]) {
            shared_vertices++;
            shared_vertices_flags.z = true;
        }
            
        if(shared_vertices == 2)
        {
            float3 v0 = (mul(meshObject.localToWorldMatrix, float4(_Vertices[_Indices[i]], 1))).xyz;
            float3 v1 = (mul(meshObject.localToWorldMatrix, float4(_Vertices[_Indices[i + 1]], 1))).xyz;
            float3 v2 = (mul(meshObject.localToWorldMatrix, float4(_Vertices[_Indices[i + 2]], 1))).xyz;

            //Compare normals
            if (abs(acos(dot(normalize(cross(v1 - v0, v2 - v0)), normalize(ray.direction)))) < PI_2)
            {
                //Check if there is an open diffraction slot
                int index;
                InterlockedAdd(_RayEnabled[group], 1, index);
                if (index <= _Diffractions) {
                    //Diffraction occurs
                    //Store the position and rotation values of the new vector
                    uint width, height, depth;
                    Result.GetDimensions(width, height, depth);
                    
                    //Calculate the new position (on the diffracting edge)
                    float3 new_pos = float3(0.0f, 0.0f, 0.0f);
                    if (shared_vertices_flags.x) {
                        new_pos = new_pos + _Vertices[_Indices[collision.index]];
                    }
                    if (shared_vertices_flags.y) {
                        new_pos = new_pos + _Vertices[_Indices[collision.index + 1]];
                    }
                    if (shared_vertices_flags.z) {
                        new_pos = new_pos + _Vertices[_Indices[collision.index + 2]];
                    }
                    new_pos = new_pos / 2;
                    new_pos = (mul(meshObject.localToWorldMatrix, float4(new_pos, 1))).xyz;

                    //Apply the changes to the buffers
                    _RayPos[group + index * width * height] = new_pos;
                    //Calculate the rotation
                    //Find the tangent vector by projecting onto the plane and normalizing
                    float3 tangent_vector = normalize(ray.direction - dot(ray.direction, normalize(cross(v1 - v0, v2 - v0))) * normalize(cross(v1 - v0, v2 - v0)));
                    _RayDir[group + index * width * height] = normalize(ray.direction + tangent_vector);

                    success = true;
                }
            }
        }
        GroupMemoryBarrierWithGroupSync();
    }
}

//-------------------------------------
//- TRACE

RayHit Trace(Ray ray, uint group)
{
	RayHit bestHit = CreateRayHit();
    Ray diffracted_ray = CreateRay(float3(0.0f, 0.0f, 0.0f), float3(0.0f, 0.0f, 0.0f));
	uint count, stride, i;
    bool diffracted = false;

	// Trace mesh objects
	_MeshObjects.GetDimensions(count, stride);
	for (i = 0; i < count; i++)
	{
        //Check the bounding box
        if (IntersectBoundingBox(ray, _MeshObjects[i])) {
            IntersectMeshObject(ray, bestHit, _MeshObjects[i]);
        }
        GroupMemoryBarrierWithGroupSync();
	}
    // Check if diffraction can occur
    for (i = 0; i < count; i++) {
        MeshObject obj = _MeshObjects[i];
        //Only check the same mesh as the hit object
        if (obj.indices_offset <= bestHit.index && obj.indices_offset + obj.indices_count > bestHit.index) {
            //Check if there is a possible diffraction
            if (!diffracted) {
                CheckDiffraction(ray, diffracted_ray, bestHit, obj, group, diffracted);
            }
        }
        GroupMemoryBarrierWithGroupSync();
    }

	return bestHit;
}


//-------------------------------------
//- CALCULATE

void CalculateEffects(inout Ray ray, RayHit hit)
{
    if (hit.distance < 1.#INF)
    {
        // Specular reflection
        ray.origin = hit.position + hit.normal * 0.001f;
        ray.direction = reflect(ray.direction, hit.normal);
        //Distance falloff
        //Currently rather extreme
        if(hit.distance > 1.0f)
            ray.volume *= 1 / (hit.distance * hit.distance);
        //Absorption on impact
        ray.volume *= hit.reflection;
        //Delay
        ray.delay += hit.distance / 343.0f;
    }
    else
    {
        // Skybox, erase the ray
        ray.volume = 0.0f;
        ray.delay = 0.0f;
    }
}

//-------------------------------------
//- KERNEL

[numthreads(4,4,8)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
    //_Pixel = id.xy;
    bool enabled = id.z == 0;

    // Get the dimensions of the RenderTexture
    uint width, height, depth;
    Result.GetDimensions(width, height, depth);

    // Transform pixel to [-1,1] range
    float2 uv = float2((id.xy + _PixelOffset) / float2(width, height) * 2.0f - 1.0f);

    // Fire a ray in a uniform direction from the source
    Ray ray = CreateSphereRay(uv, (id.x * 8) + id.y);

    // Trace and shade the ray
    RayHit hit;
    //float3 result = float3(0, 0, 0);
    for (int i = 0; i < _Bounces; i++)
    {
        GroupMemoryBarrierWithGroupSync(); //Synchronize threads to ensure proper timing

        if (!(_RayDir[id.x + id.y * width + id.z * width * height].x == 0.0f && 
            _RayDir[id.x + id.y * width + id.z * width * height].y == 0.0f && 
            _RayDir[id.x + id.y * width + id.z * width * height].z == 0.0f))
        {
            enabled = true;
            //Apply the position and rotation values to the vector
            ray.origin = _RayPos[id.x + id.y * width + id.z * width * height];
            ray.direction = _RayDir[id.x + id.y * width + id.z * width * height];
        }

        hit = Trace(ray, id.x + id.y * width);
        CalculateEffects(ray, hit);

        /*if (ray.volume == 0.0f && enabled)
            break;*/
        if (hit.hitSoundSource && enabled)
            break;
    }
    //Kill all data on dead rays
    if (!hit.hitSoundSource)
    {
        ray.volume = 0.0f;
        ray.delay = 0.0f;
    }
    else if (ray.volume == 0.0f)
    {
        ray.delay = 0.0f;
    }

    //Cap the delay at 1.0f
    else if (ray.delay > 1.0f) 
    {
        ray.delay = 1.0f;
    }

    //Valid rays write to the end texture
    if (enabled) {
        Result[id.xyz] = ray.volume;
    }
}
